) +
scale_y_continuous(labels = scales::comma, sec.axis = sec_axis(~ .)) +
theme_bw() +
theme(strip.text.x = element_text(size=12, face="bold", hjust = 0, color = '#36A30B'),
strip.background = element_blank(),
panel.grid.minor.x = element_blank(),
panel.border = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text.x = element_text(angle = 20))
death_plot
# cases
case_plot <- ggplot(data = top_case_data, aes(x = date, y = total_cases, group = place)) +
geom_line(data = top_case_data, aes(x = date, y = total_cases, group = place), color = "gray", alpha = 0.6) +
geom_line(color = "#36A30B", size = 1.5) +
facet_wrap(~place) +
geom_point(shape = 3, size = 0.5) +
geom_point(data = top_case_data[, .(place, total_cases, abbrev, date)][, .SD[date == max(date)], by = place],
aes(x = date, y = total_cases, group = place), size = 2) +
geom_text(data = top_case_data[, .(place, total_cases, abbrev, date)][, .SD[date == max(date)], by = place],
aes(x = date - 150, y = top_case_data[, max(total_cases)] - 500, group = place, label = paste(format(total_cases, big.mark = ","), ' total cases', sep = ' '))) +
labs(
x = "\nDate",
y = "Cumulative number of daily cases\n",
title = '',
subtitle = subtitle,
caption = caption
) +
scale_y_continuous(labels = scales::comma, sec.axis = sec_axis(~ .)) +
theme_bw() +
theme(strip.text.x = element_text(size=12, face="bold", hjust = 0, color = '#36A30B'),
strip.background = element_blank(),
panel.grid.minor.x = element_blank(),
panel.border = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text.x = element_text(angle = 20))
death_plot <- ggplot(data = top_death_data, aes(x = date, y = total_deaths, group = place)) +
geom_line(data = top_death_data, aes(x = date, y = total_deaths, group = place), color = "gray", alpha = 0.6) +
geom_line(color = "#36A30B", size = 1.5) +
facet_wrap(~place) +
geom_point(shape = 3, size = 0.5) +
geom_point(data = top_death_data[, .(place, total_deaths, abbrev, date)][, .SD[date == max(date)], by = place],
aes(x = date, y = total_deaths, group = place), size = 2) +
geom_text(data = top_death_data[, .(place, total_deaths, abbrev, date)][, .SD[date == max(date)], by = place],
aes(x = date - 150, y = top_death_data[, max(total_deaths)] - 500, group = place, label = paste(format(total_deaths, big.mark = ","), ' total deaths', sep = ' '))) +
labs(
x = "\nDate",
y = "Cumulative number of daily deaths\n",
title = '',
subtitle = subtitle,
caption = caption
) +
scale_y_continuous(labels = scales::comma, sec.axis = sec_axis(~ .)) +
theme_bw() +
theme(strip.text.x = element_text(size=12, face="bold", hjust = 0, color = '#36A30B'),
strip.background = element_blank(),
panel.grid.minor.x = element_blank(),
panel.border = element_blank(),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text.x = element_text(angle = 20))
runApp()
runApp()
###
f <- list.files("plot_functions")
for (i in seq_along(f)) {source(paste0("plot_functions/", f[i]))}
runApp()
top_case_death_facetplot()
runApp()
runApp()
runApp()
# libraries ----------
library("tidyverse")
library("glue")
library("janitor")
library("lubridate")
library("gt")
library("covid19india")
library(data.table)
snapshot <- function() {
# functions -----------
get_snap <- function(t = NULL) {
nat <- get_nat_counts()[]
vax_dat <- get_state_vax()[date <= nat[, max(date)]][place == "India", .(date, daily_doses)][, lag := daily_doses][]
if (!is.null(t)) {
try(if (!is.Date(t)) stop("t needs to be a date (YYYY-MM-DD)"))
today <- as.Date(t)
} else {
today     <- min(max(nat$date, na.rm = TRUE),
max(vax_dat$date, na.rm = TRUE))
}
yesterday <- today - 1
week_ago  <- today - 7
month_ago <- today - 30
get_stats <- function(d) {
tmp_nat <- nat[date == d]
tmp_deaths <- tmp_nat[, daily_deaths]
tmp_cases  <- tmp_nat[, daily_cases]
tmp_vax <- vax_dat[date == d, lag]
data.table(
Day        = fifelse(d == today, "Today",
fifelse(d == yesterday, "Yesterday",
fifelse(d == week_ago, "One week ago",
fifelse(d == month_ago, "One month ago", NA)))),
Date       = format(d, "%m/%d"),
Deaths     = format(tmp_deaths, big.mark = ","),
Cases      = format(tmp_cases, big.mark = ","),
Vaccines   = format(tmp_vax, big.mark = ",")
)
}
today_stats     <- get_stats(today)
yesterday_stats <- get_stats(yesterday)
week_ago_stats  <- get_stats(week_ago)
month_ago_stats <- get_stats(month_ago)
rbindlist(list(
today_stats,
yesterday_stats,
week_ago_stats,
month_ago_stats
))
}
make_pretty <- function(x) {
x %>%
gt() %>%
# bold column headers
tab_style(
style = cell_text(
font = "arial",
weight = "bold"
),
locations = cells_column_labels(everything())
) %>%
# center column headers
tab_style(
style = cell_text(
align = "center"
),
locations = cells_column_labels(c(Date, Deaths, Cases))
) %>%
# format columns
tab_style(
style = list(
cell_text(
font = "arial",
align = "center"
)
),
locations = list(
cells_body(columns = c(Date, Deaths, Cases))
)
)
}
# run ----------
snap <- get_snap()
# today <- as.Date(snap[Day == "Today", Date], "%m/%d")
return(make_pretty(snap))
}
snapshot()
nat <- get_nat_counts()[]
nat
get_nat_counts
remotes::install_gitlab("maxsal/covid19india", ref = "mohfw")
# libraries ----------
library("tidyverse")
library("glue")
library("janitor")
library("lubridate")
library("gt")
library("covid19india")
library(data.table)
get_nat_counts
?install_gitlab
remotes::install_gitlab("maxsal/covid19india@mohfw")
# libraries ----------
library("tidyverse")
library("glue")
library("janitor")
library("lubridate")
library("gt")
library("covid19india")
library(data.table)
get_nat_counts
nat <- get_nat_counts()
nat
tmp <- fread("https://raw.githubusercontent.com/umich-cphds/cov-ind-19-data/master/source_data/source_data_latest.csv")
tmp <- fread("https://raw.githubusercontent.com/umich-cphds/cov-ind-19-data/master/source_data/source_data_latest.csv",
fill = TRUE)
tmp
tmp[, total_deaths := sum(Deaths), by = Date]
tmp[, total_deaths := sum(Deaths), by = Date][]
tmp[, .(total_deaths := sum(Deaths)), by = Date][]
tmp[, .(total_deaths = sum(Deaths)), by = Date][]
tmp[source != "covid19india"][]
tmp1 <- tmp[source != "covid19india"]
tmp <- fread("https://raw.githubusercontent.com/umich-cphds/cov-ind-19-data/master/source_data/source_data_latest.csv",
fill = TRUE)[, Date := as.Date(Date, "%d/%m/%Y")]
tmp[, .(total_deaths = sum(Deaths)), by = Date][]
tmp1 <- tmp[source != "covid19india"]
tmp1 |>
ggplot(aes(x = Date, y = Deaths, group = State)) +
geom_line()
tmp[date == max(date)]
tmp[Date == max(Date)]
tmp[, .(total_deaths = sum(Deaths)), by = Date][]
tmp
i
tmp1 <- tmp[source != "covid19india"]
tmp1
tmp1[Date >= "2021-10-13"]
tmp1 <- tmp[source != "covid19india"][, .(State, Date, Cases, Recovered, Active = Deaths, Deaths = Active)][]
tmp1
tmp <- fread("https://raw.githubusercontent.com/umich-cphds/cov-ind-19-data/master/source_data/source_data_latest.csv",
fill = TRUE)[, Date := as.Date(Date, "%d/%m/%Y")]
tmp_pre <- tmp[Date <= "2021-10-12"]
tmp_post <- tmp[Date >= "2021-10-13"][, .(State, Date, Cases, Recovered, Active = Deaths, Deaths = Active)][]
new_tmp <- rbindlist(list(tmp_pre, tmp_post))
tmp <- fread("https://raw.githubusercontent.com/umich-cphds/cov-ind-19-data/master/source_data/source_data_latest.csv",
fill = TRUE)[, Date := as.Date(Date, "%d/%m/%Y")]
tmp_pre <- tmp[Date <= "2021-10-12"]
tmp_post <- tmp[Date >= "2021-10-13"][, .(State, Date, Cases, Recovered, Active = Deaths, Deaths = Active)][]
new_tmp <- rbindlist(list(tmp_pre, tmp_post), fill = TRUE)
new_tmp |>
ggplot(aes(x = Date, y = Deaths, group = State)) +
geom_line()
new_tmp
new_tmp <- new_tmp[order(Date), `:=` (
daily_cases = Cases - shift(Cases),
daily_deaths = Deaths - shift(Deaths),
daily_recovered = Recovered - shift(Recovered)
)][]
new_tmp
new_tmp <- rbindlist(list(tmp_pre, tmp_post), fill = TRUE)
new_tmp <- new_tmp[order(Date), `:=` (
daily_cases = Cases - shift(Cases),
daily_deaths = Deaths - shift(Deaths),
daily_recovered = Recovered - shift(Recovered)
), by = "State"][]
new_tmp
new_tmp |>
ggplot(aes(x = Date, y = daily_deaths)) +
geom_line() +
facet_wrap( ~State)
new_tmp |>
ggplot(aes(x = Date, y = daily_cases)) +
geom_line() +
facet_wrap( ~State)
nat <- get_nat_counts()[]
snapshot <- function() {
# functions -----------
get_snap <- function(t = NULL) {
nat <- get_nat_counts(mohfw = TRUE)[, Date := as.Date(Date, "%d/%m/%Y")][]
quick_fix <- function(x) {
x1 <- x[Date <= "2021-10-12"]
x2 <- x[Date >= "2021-10-13"][, .(State, Date, Cases, Recovered, Active = Deaths, Deaths = Active)][]
rbindlist(list(x1, x2, fill = TRUE))
}
nat <- quick_fix(nat)
vax_dat <- get_state_vax()[date <= nat[, max(date)]][place == "India", .(date, daily_doses)][, lag := daily_doses][]
if (!is.null(t)) {
try(if (!is.Date(t)) stop("t needs to be a date (YYYY-MM-DD)"))
today <- as.Date(t)
} else {
today     <- min(max(nat$date, na.rm = TRUE),
max(vax_dat$date, na.rm = TRUE))
}
yesterday <- today - 1
week_ago  <- today - 7
month_ago <- today - 30
get_stats <- function(d) {
tmp_nat <- nat[date == d]
tmp_deaths <- tmp_nat[, daily_deaths]
tmp_cases  <- tmp_nat[, daily_cases]
tmp_vax <- vax_dat[date == d, lag]
data.table(
Day        = fifelse(d == today, "Today",
fifelse(d == yesterday, "Yesterday",
fifelse(d == week_ago, "One week ago",
fifelse(d == month_ago, "One month ago", NA)))),
Date       = format(d, "%m/%d"),
Deaths     = format(tmp_deaths, big.mark = ","),
Cases      = format(tmp_cases, big.mark = ","),
Vaccines   = format(tmp_vax, big.mark = ",")
)
}
today_stats     <- get_stats(today)
yesterday_stats <- get_stats(yesterday)
week_ago_stats  <- get_stats(week_ago)
month_ago_stats <- get_stats(month_ago)
rbindlist(list(
today_stats,
yesterday_stats,
week_ago_stats,
month_ago_stats
))
}
make_pretty <- function(x) {
x %>%
gt() %>%
# bold column headers
tab_style(
style = cell_text(
font = "arial",
weight = "bold"
),
locations = cells_column_labels(everything())
) %>%
# center column headers
tab_style(
style = cell_text(
align = "center"
),
locations = cells_column_labels(c(Date, Deaths, Cases))
) %>%
# format columns
tab_style(
style = list(
cell_text(
font = "arial",
align = "center"
)
),
locations = list(
cells_body(columns = c(Date, Deaths, Cases))
)
)
}
# run ----------
snap <- get_snap()
# today <- as.Date(snap[Day == "Today", Date], "%m/%d")
return(make_pretty(snap))
}
snapshot()
get_nat_counts()
get_state_counts(mohfw = TRUE)
state <- get_state_counts(mohfw = TRUE)[, .(place, date, total_cases, total_recovered, total_deaths)]
x <- state
x1 <- x[Date <= "2021-10-12"]
x
x1 <- x[date <= "2021-10-12"]
x1
x2 <- x[date >= "2021-10-13"][, .(place, date, total_cases, total_recovered, total_deaths = total_active)][]
state <- get_state_counts(mohfw = TRUE)[, .(place, date, total_cases, total_recovered, total_deaths, total_active)]
x <- state
x1 <- x[date <= "2021-10-12"]
x2 <- x[date >= "2021-10-13"][, .(place, date, total_cases, total_recovered, total_deaths = total_active)][]
x2
x1
x1 <- x[date <= "2021-10-12"][, !c("total_active")]
x2 <- x[date >= "2021-10-13"][, .(place, date, total_cases, total_recovered, total_deaths = total_active)][]
x3 <- rbindlist(list(x1, x2, fill = TRUE))
x3 <- rbindlist(list(x1, x2), fill = TRUE)
x3
x3 <- x3[, .SD[lapply, sum, na.rm = TRUE], by = "date", .SDcols(total_cases, total_deaths, total_recovered)]
x3 <- x3[, .SD[lapply, sum, na.rm = TRUE], by = "date", .SDcols = c(total_cases, total_deaths, total_recovered)]
x3 <- x3[, .SD[lapply, sum, na.rm = TRUE], by = "date", .SDcols = c("total_cases", "total_deaths", "total_recovered")]
x3 <- rbindlist(list(x1, x2), fill = TRUE)
x3 <- x3[, lapply(.SD, sum, na.rm = TRUE), by = "date", .SDcols = c("total_cases", "total_deaths", "total_recovered")]
x3
x3 <- x3[order(date), `:=` (
daily_cases = total_cases - shift(total_cases),
daily_recovered = total_recovered - shift(total_recovered),
daily_deaths = total_deaths - shift(total_deaths)
)][]
x3
# functions -----------
get_snap <- function(t = NULL) {
state <- get_state_counts(mohfw = TRUE)[, .(place, date, total_cases, total_recovered, total_deaths, total_active)]
quick_fix <- function(x) {
x1 <- x[date <= "2021-10-12"][, !c("total_active")]
x2 <- x[date >= "2021-10-13"][, .(place, date, total_cases, total_recovered, total_deaths = total_active)][]
x3 <- rbindlist(list(x1, x2), fill = TRUE)
x3 <- x3[, lapply(.SD, sum, na.rm = TRUE), by = "date", .SDcols = c("total_cases", "total_deaths", "total_recovered")]
x3 <- x3[order(date), `:=` (
daily_cases = total_cases - shift(total_cases),
daily_recovered = total_recovered - shift(total_recovered),
daily_deaths = total_deaths - shift(total_deaths)
)][]
x3
}
nat <- quick_fix(state)
vax_dat <- get_state_vax()[date <= nat[, max(date)]][place == "India", .(date, daily_doses)][, lag := daily_doses][]
if (!is.null(t)) {
try(if (!is.Date(t)) stop("t needs to be a date (YYYY-MM-DD)"))
today <- as.Date(t)
} else {
today     <- min(max(nat$date, na.rm = TRUE),
max(vax_dat$date, na.rm = TRUE))
}
yesterday <- today - 1
week_ago  <- today - 7
month_ago <- today - 30
get_stats <- function(d) {
tmp_nat <- nat[date == d]
tmp_deaths <- tmp_nat[, daily_deaths]
tmp_cases  <- tmp_nat[, daily_cases]
tmp_vax <- vax_dat[date == d, lag]
data.table(
Day        = fifelse(d == today, "Today",
fifelse(d == yesterday, "Yesterday",
fifelse(d == week_ago, "One week ago",
fifelse(d == month_ago, "One month ago", NA)))),
Date       = format(d, "%m/%d"),
Deaths     = format(tmp_deaths, big.mark = ","),
Cases      = format(tmp_cases, big.mark = ","),
Vaccines   = format(tmp_vax, big.mark = ",")
)
}
today_stats     <- get_stats(today)
yesterday_stats <- get_stats(yesterday)
week_ago_stats  <- get_stats(week_ago)
month_ago_stats <- get_stats(month_ago)
rbindlist(list(
today_stats,
yesterday_stats,
week_ago_stats,
month_ago_stats
))
}
snapshot()
snapshot <- function() {
# functions -----------
get_snap <- function(t = NULL) {
state <- get_state_counts(mohfw = TRUE)[, .(place, date, total_cases, total_recovered, total_deaths, total_active)]
quick_fix <- function(x) {
x1 <- x[date <= "2021-10-12"][, !c("total_active")]
x2 <- x[date >= "2021-10-13"][, .(place, date, total_cases, total_recovered, total_deaths = total_active)][]
x3 <- rbindlist(list(x1, x2), fill = TRUE)
x3 <- x3[, lapply(.SD, sum, na.rm = TRUE), by = "date", .SDcols = c("total_cases", "total_deaths", "total_recovered")]
x3 <- x3[order(date), `:=` (
daily_cases = total_cases - shift(total_cases),
daily_recovered = total_recovered - shift(total_recovered),
daily_deaths = total_deaths - shift(total_deaths)
)][]
x3
}
nat <- quick_fix(state)
vax_dat <- get_state_vax()[date <= nat[, max(date)]][place == "India", .(date, daily_doses)][, lag := daily_doses][]
if (!is.null(t)) {
try(if (!is.Date(t)) stop("t needs to be a date (YYYY-MM-DD)"))
today <- as.Date(t)
} else {
today     <- min(max(nat$date, na.rm = TRUE),
max(vax_dat$date, na.rm = TRUE))
}
yesterday <- today - 1
week_ago  <- today - 7
month_ago <- today - 30
get_stats <- function(d) {
tmp_nat <- nat[date == d]
tmp_deaths <- tmp_nat[, daily_deaths]
tmp_cases  <- tmp_nat[, daily_cases]
tmp_vax <- vax_dat[date == d, lag]
data.table(
Day        = fifelse(d == today, "Today",
fifelse(d == yesterday, "Yesterday",
fifelse(d == week_ago, "One week ago",
fifelse(d == month_ago, "One month ago", NA)))),
Date       = format(d, "%m/%d"),
Deaths     = format(tmp_deaths, big.mark = ","),
Cases      = format(tmp_cases, big.mark = ","),
Vaccines   = format(tmp_vax, big.mark = ",")
)
}
today_stats     <- get_stats(today)
yesterday_stats <- get_stats(yesterday)
week_ago_stats  <- get_stats(week_ago)
month_ago_stats <- get_stats(month_ago)
rbindlist(list(
today_stats,
yesterday_stats,
week_ago_stats,
month_ago_stats
))
}
make_pretty <- function(x) {
x %>%
gt() %>%
# bold column headers
tab_style(
style = cell_text(
font = "arial",
weight = "bold"
),
locations = cells_column_labels(everything())
) %>%
# center column headers
tab_style(
style = cell_text(
align = "center"
),
locations = cells_column_labels(c(Date, Deaths, Cases))
) %>%
# format columns
tab_style(
style = list(
cell_text(
font = "arial",
align = "center"
)
),
locations = list(
cells_body(columns = c(Date, Deaths, Cases))
)
)
}
# run ----------
snap <- get_snap()
# today <- as.Date(snap[Day == "Today", Date], "%m/%d")
return(make_pretty(snap))
}
snapshot()
